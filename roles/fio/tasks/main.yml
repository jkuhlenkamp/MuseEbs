---
# file: /roles/cassandra/tasks/main.yml

##########################################################
# Create required directories
- name: "Create result dir: ../results"
  file: >
    path={{ result_dir }}
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0755"

- name: "Create workload dir: ../workloads/fio"
  file: >
    path={{ workload_dir }}
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0755"

- name: "Create workload dir: ../workloads/fio/load"
  file: >
    path={{ workload_dir }}/load
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0755"

- name: "Create workload dir: ../workloads/fio/burn"
  file: >
    path={{ workload_dir }}/burn
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0755"

- name: "Create workload dir: ../workloads/fio/run"
  file: >
    path={{ workload_dir }}/run
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0755"

- name: Install fio via apt
  sudo: true
  apt: >
    name=fio 
    state=present
    update_cache=yes

- name: "Create workload executor script: exp_exe.sh"
  template: >
    src=exe_exp.sh.j2
    dest="{{ workload_dir }}/exe_exp.sh"
    owner={{ user }}
    group={{ user }}
    mode=0777

##########################################################
# Create workloads

- name: "Create fio workload files for phase: LOAD"
  template: >
    src="ninja-p1-load.j2"
    dest="{{ workload_dir }}/load/load.job"
    owner={{ user }}
    group={{ user }}
    mode=0777

- name: "Create fio workload files for phase: BURN"
  template: >
    src="ninja-p1-burn.j2"
    dest="{{ workload_dir }}/burn/burn.job"
    owner={{ user }}
    group={{ user }}
    mode=0777

# Threads: [1, 2, 4, 8, 12, 16, 24, 32, 48, 64]
# File access patterns: [randread, write]

- name: "Create fio workload files for phase: RUN"
  template: >
    src="ninja-p1-run.j2"
    dest="{{ workload_dir }}/run/run-{{ item.access }}-thr_{{ item.threads }}.job"
    owner={{ user }}
    group={{ user }}
    mode=0777
  with_items:
    - { access: 'write', threads: '1' }
    - { access: 'write', threads: '2' }
    - { access: 'write', threads: '4' }
    - { access: 'write', threads: '8' }
    - { access: 'write', threads: '12' }
    - { access: 'write', threads: '16' }
    - { access: 'write', threads: '24' }
    - { access: 'write', threads: '32' }
    - { access: 'write', threads: '48' }
    - { access: 'write', threads: '64' }
    - { access: 'randread', threads: '1' }
    - { access: 'randread', threads: '2' }
    - { access: 'randread', threads: '4' }
    - { access: 'randread', threads: '8' }
    - { access: 'randread', threads: '12' }
    - { access: 'randread', threads: '16' }
    - { access: 'randread', threads: '24' }
    - { access: 'randread', threads: '32' }
    - { access: 'randread', threads: '48' }
    - { access: 'randread', threads: '64' }
    
##########################################################
# Configure result upload

- name: "Create inv dir: ../workloads/inv"
  file: >
    path={{ workload_dir }}/inv
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0775"

- name: "Create localhost file: hosts"
  template: >
    src=hosts.j2
    dest="{{ workload_dir }}/inv/hosts"
    owner={{ user }}
    group={{ user }}
    mode=0664
    
- name: "Install package: python-pip"
  sudo: true
  apt: >
    name=python-pip
    state=latest
    update_cache=yes

- name: "Install package: boto"
  sudo: true
  pip: name=boto state=latest

- name: "Install package: awscli"
  sudo: true
  pip: name=awscli state=latest

- name: "Install package: ansible"
  sudo: true
  apt: name=ansible state=latest

- name: "Create config dir: ../.aws/"
  file: >
    path="{{ home_dir }}/.aws"
    state=directory
    recurse=yes
    owner={{ user }}
    group={{ user }}
    mode="0755"

- name: "Create AWS CLI config file: ../.aws/config"
  template: >
    src="awscli_config.j2"
    dest="{{ home_dir }}/.aws/config"
    owner={{ user }}
    group={{ user }}
    mode=0600

- name: "Export AWS_CONFIG_FILE in ../.bashrc"
  lineinfile: >
    dest=/home/ubuntu/.bashrc
    line="export AWS_CONFIG_FILE={{ home_dir }}//.aws/config"
